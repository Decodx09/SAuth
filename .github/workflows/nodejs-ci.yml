name: SAuth CI/CD Pipeline made by shivansh sukhija

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install Dependencies
        run: npm install
      # - name: Lint Code with ESLint
      #   run: npm run lint

  codeql-analysis:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      security-events: write 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  build-and-scan-docker-image:
    needs: build-and-test
    runs-on: ubuntu-latest
    outputs:
      image_tag: ghcr.io/decodx09/sauth:${{ github.sha }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/decodx09/sauth
          tags: |
            type=sha,format=short
            type=raw,value=latest,enable=true
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          # Define your servers here - replace with your actual server hostnames
          echo 'matrix={
            "include": [
              {
                "host": "ec2-3-137-192-121.us-east-2.compute.amazonaws.com",
                "name": "production-1"
              },
              {
                "host": "ec2-13-58-250-41.us-east-2.compute.amazonaws.com", 
                "name": "production-2"
              }
            ]
          }' >> $GITHUB_OUTPUT

  deploy:
    needs: [codeql-analysis, build-and-scan-docker-image, prepare-matrix]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.prepare-matrix.outputs.matrix) }}
      fail-fast: false  # Continue deploying to other servers even if one fails
    steps:
      - name: Deploy to ${{ matrix.name }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ matrix.host }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            set -e
            sudo usermod -aG docker ${{ secrets.EC2_USERNAME }} || true
            
            echo "Deploying to ${{ matrix.name }} (${{ matrix.host }})"
            echo "Logging into GitHub Container Registry on the server..."
            echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            echo "Pulling the latest image from the registry..."
            docker pull ghcr.io/decodx09/sauth:latest
            
            echo "Stopping and removing the old container..."
            docker stop my-app || true
            docker rm my-app || true
            
            echo "Starting the new container..."
            docker run -d -p 3000:3000 --name my-app --restart always ghcr.io/decodx09/sauth:latest
            
            echo "Deployment complete on ${{ matrix.name }}. App accessible at http://${{ matrix.host }}:3000"

  auto-rollback:
    needs: [deploy]
    if: failure() && contains(needs.deploy.result, 'failure')
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.prepare-matrix.outputs.matrix) }}
    steps:
      - name: Automatic Rollback on ${{ matrix.name }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ matrix.host }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            set -e
            
            echo "Deployment failed on ${{ matrix.name }} - initiating automatic rollback..."
            echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Get the second-latest image (previous working version)
            PREVIOUS_IMAGE=$(docker images ghcr.io/decodx09/sauth --format "{{.Repository}}:{{.Tag}}" | grep -E "sha-[a-f0-9]{7}" | head -n 2 | tail -n 1)
            
            if [ -n "$PREVIOUS_IMAGE" ]; then
              echo "Rolling back ${{ matrix.name }} to: $PREVIOUS_IMAGE"
              docker stop my-app || true
              docker rm my-app || true
              docker run -d -p 3000:3000 --name my-app --restart always $PREVIOUS_IMAGE
              echo "Automatic rollback complete on ${{ matrix.name }}"
            else
              echo "No previous image found for rollback on ${{ matrix.name }}"
            fi
