name: SAuth CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - run: npm install

  codeql-analysis:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: javascript
      - uses: github/codeql-action/analyze@v3

  build-and-scan-docker-image:
    needs: build-and-test
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.meta.outputs.tags }}
      latest: ghcr.io/${{ github.repository }}:latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha,format=short
            type=raw,value=latest,enable=true
      - uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  integration-tests:
    needs: build-and-scan-docker-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Run app container for tests
        run: |
          docker run -d --name test-app -p 3000:3000 ghcr.io/decodx09/sauth:latest
          sleep 10      # Give container time to start

      - name: Health check of app (replace with your endpoint)
        run: |
          max_tries=10
          for i in $(seq 1 $max_tries); do
            sleep 2
            if curl -sf http://localhost:3000/health; then
              echo "App is up!"
              exit 0
            fi
          done
          echo "App did NOT start successfully."
          exit 1

      - name: Run integration/API tests (optional)
        run: |
          # You can use curl or a test runner (jest, mocha, etc) here
          # Example:
          curl -sf http://localhost:3000/api/status || exit 1

      - name: Cleanup
        run: docker rm -f test-app || true

  deploy:
    needs: [build-and-scan-docker-image]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        host: 
          - ec2-13-58-60-124.us-east-2.compute.amazonaws.com
          - ec2-18-216-75-38.us-east-2.compute.amazonaws.com

    steps:
      - name: Print runner public IP
        run: curl ifconfig.me || curl ipinfo.io/ip || curl https://ipecho.net/plain

      - name: DNS lookup for EC2 host
        run: nslookup ${{ matrix.host }} || ping -c 2 ${{ matrix.host }}

      - name: Deploy to EC2 Instance (SSH)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ matrix.host }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          port: 22
          timeout: 60s
          command_timeout: 20m
          debug: true
          script_stop: true
          script: |
            set -e
            whoami
            hostname
            uname -a

            sudo usermod -aG docker ${{ secrets.EC2_USERNAME }} || true

            echo "Logging into GHCR..."
            echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            echo "Pulling image..."
            docker pull ghcr.io/decodx09/sauth:latest

            echo "Stopping/removing old container..."
            docker stop my-app || true
            docker rm my-app || true

            echo "Starting new container..."
            docker run -d -p 3000:3000 --name my-app --restart always ghcr.io/decodx09/sauth:latest

            # Friendly name logic
            if [ "${{ matrix.host }}" = "ec2-13-58-60-124.us-east-2.compute.amazonaws.com" ]; then
              server_name="application server 1"
            elif [ "${{ matrix.host }}" = "ec2-18-216-75-38.us-east-2.compute.amazonaws.com" ]; then
              server_name="application server 2"
            else
              server_name="unknown server"
            fi

            echo "Deployment complete on ${server_name}. App at http://${{ matrix.host }}:3000"
